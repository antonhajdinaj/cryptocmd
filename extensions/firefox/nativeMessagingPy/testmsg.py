import json
import struct

# Encode a message for transmission, given its content.
def encode_message(message_content):
    encoded_content = json.dumps(message_content)
    encoded_length = struct.pack('=I', len(encoded_content))
    return {'length': encoded_length, 'content': encoded_content}


if __name__ == "__main__":
#    message = { 'request': "create_csr", 'request_id': "g5w4AMXo0A", 'rsa_key_length': 2048, 'subject_name': "cn=John Doe,o=Company,c=US", }
    message = { 'certificate': "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVlVENDQW1HZ0F3SUJBZ0lVVW5OM1VERTVnd1NpbWNBQVN1VkN1NWpvZW5Jd0RRWUpLb1pJaHZjTkFRRUxCUUF3SERFYU1CZ0cKQTFVRUF3d1JSVVZCVXlCRVJVMVBJRkpQVDFRZ1EwRXdIaGNOTWpBd09URXhNVEkxTkRVNFdoY05Nak13T1RFeE1USTFORFU0V2pBZQpNUTB3Q3dZRFZRUUREQVIwWlhOME1RMHdDd1lEVlFRS0RBUkZSVUZUTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCCkNnS0NBUUVBc21TOUhGKzVVQnJpbFFZc1JyQkpxeDhCUzRucWVoaWYyRDlPSndKZkVYSUdtNXpOdGZYSkRuN3pDNHFOdmVKdzFHZU8KQnZicS9aUzF2NjJLYk5mcU5NbkZjYlM4R3ppb29lZXpDZThEQktVWFJ5RlZMTzRjdEdOY3pudVE5cmxQVGF6SHgzT0o3ZHFYRzhRVApiU29CcWs1Sm53WWtISmsxcFh6dXBhTVdVbjY5djZjeHM2NzRHWDZZWnJrM2hRc04zcW1WdVkvWDFtaHlwUktsSG5FOTZMempMNWdTCmJhc1ZQcEJzeWZZTDNGL0RvSmlyL0FGUlp6ZkZtUXVmeEpUZnJ6YTVmRXNOSlp2TzdZNGhRdVRLT2FnM2JTZnNDeS92Z3JxMzQycDAKa2VYOENHQVNMNXRBcnp4MjlXdURYQ0RETmw2M3YxZWpVUkZaQ2tFcXN1N1pJUUlEQVFBQm80R3dNSUd0TUF3R0ExVWRFd0VCL3dRQwpNQUF3SHdZRFZSMGpCQmd3Rm9BVVBPQnpuMk1TYWpaUzh3MWJtOWtvWGd0THlnZ3dHUVlEVlIwZ0JCSXdFREFPQmd3ckJnRUVBWU92ClJ3RUJBUUV3TWdZRFZSMGxCQ3N3S1FZSUt3WUJCUVVIQXdJR0NDc0dBUVVGQndNRUJnY3JCZ0VGQWdNRUJnb3JCZ0VFQVlJM0NnTU0KTUIwR0ExVWREZ1FXQkJSb2taREY4Mnk2K2I3Njh3VjEvbFV0T1BRQmVqQU9CZ05WSFE4QkFmOEVCQU1DQnNBd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnSUJBTEhZYXg0Q3FiOHFQVEZNdU1LVGw5MG1FMjZYZ28zY3pIR0F3QzNZejY5Tk90RDBvSTB1VE1sZ0hFVlhWV3FJCkNpbXUySEZBSTFPMGYwRGJjUVM5UlgyNzQxb3Y1SnhGU0N4U2pYaXRoZXpSSTlmSUg2Z3ZBT0VRZklhSUxvSDdiMGxXL3NacDIwZUQKUm52RFZKN2hvMFVob1VkK0NlbENLbDlGMVlKcmVQN2lUSVpOeUtScXhrVHBWWFhQZ1lUbVI3bXl6L25JdVkrNXBibzJGcXpJdmx6Ngo5d3l6N09BN3grSm0vWXBPcnNrZlliVGowQVRVQlYyaWo5d0U2eFk4UHVyV2pMU3hCRjNKL0F4NHBGWjM3SWw1SkZPNFZWcE1LdmdqCmtyWU1SanBzTFBNbU4xQnBCem9zeFhRMW8zbzBSZXp3dnhMTW5mNG10VFQ1NGZyelJweFByVk9LU2ppVEpEMVdvb3RtazZ1UHZiNVkKamtjV0xscXVkMjcxby8vc1JEdnIrSE91cWZsSXNRMGk0NmNoejloblA0UjZPTmFYK1Z2cWpWN0tjQTB4OFJOMDBxSzYwSEI0OGlUaQpIREdqVWNWQVZxeEl2cEI3RmlVUkczZmpEMkx5RkZXb1krMXNQUEQvL2UyYVd3TTZUNXRuRDM1Ry9pdEhxV2phZmRhM1pYRHBpWHlGCmRNdUZlZlBpZ3ZQcitzN3FsRXNBQkkrQ1BweXZQZ2VkQ1ZWMXdGRGFWM1hMcUs2Zjd6TEZ6NVNLMHJtQ2JnZmYwM0RnTXhIUmhPaEgKci9JdnFrRHJUWmRSeTUvWm1NZkxFbnFFUldJTkdnemxqTDhvWTlKQXVWT2xrUHBBZm4xQVZjTjB0bjdvZFpCZ29rL0kzT29EcVlNbQptSm1LaHZtay8vSzIKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==", 'request': "import_certificate", 'request_id': "xyeixFv1go" }
#    message = { 'issuer': "C=BE,ST=Brussels,O=CWF,OU=2nd year,CN=RootCA,1.2.840.113549.1.9.1=info@cwf.be", 'password': "system", 'request': "export_pfx_key", 'request_id': "E2aZEiwlxP", 'serial_number': "0x64e6120f70f5b6625168c3e6b52f1c5fa5b8cc69" }

#    message = { 'password': "system", 'pkcs12': "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\n",'request': "import_pfx_key", 'request_id': "TK8YEHddFc" }
    enc = encode_message(message)
    f = open("./test.msg", "wb")
    f.write(bytearray(enc['length']))
    f.write(bytearray(enc['content'], "utf-8"))
    f.close()
